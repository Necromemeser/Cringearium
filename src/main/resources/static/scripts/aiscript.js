$(document).ready(function() {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI-—Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π think-–±–ª–æ–∫–æ–≤
    function createAiMessage(content, isOldMessage = false) {
        const aiMessageEl = $('<div class="message ai-message"><strong>–ö—Ä–∏–Ω–∂–∏–∫:</strong> </div>');
        const mainTextEl = $('<div class="ai-main-text"></div>');
        const thinkContainer = $('<div class="think-container"></div>');
        const thinkToggle = $('<button class="think-toggle">üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è</button>');
        const thinkContent = $('<div class="think-content" style="display:none"></div>');

        let inThinkBlock = false;
        let remainingContent = content;
        let hasThinkContent = false;

        // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è think-–±–ª–æ–∫–æ–≤
        while (remainingContent.length > 0) {
            if (!inThinkBlock) {
                const thinkStart = remainingContent.indexOf('<think>');
                if (thinkStart >= 0) {
                    mainTextEl.append(remainingContent.substring(0, thinkStart));
                    inThinkBlock = true;
                    remainingContent = remainingContent.substring(thinkStart + 7);
                    hasThinkContent = true;
                } else {
                    mainTextEl.append(remainingContent);
                    remainingContent = '';
                }
            } else {
                const thinkEnd = remainingContent.indexOf('</think>');
                if (thinkEnd >= 0) {
                    thinkContent.append(remainingContent.substring(0, thinkEnd));
                    remainingContent = remainingContent.substring(thinkEnd + 8);
                    inThinkBlock = false;
                } else {
                    thinkContent.append(remainingContent);
                    remainingContent = '';
                }
            }
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        thinkContainer.append(thinkToggle).append(thinkContent);
        aiMessageEl.append(thinkContainer).append(mainTextEl);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å think-–∫–æ–Ω—Ç–µ–Ω—Ç
        if (hasThinkContent) {
            thinkToggle.on('click', function() {
                thinkContent.slideToggle();
                $(this).text(
                    thinkContent.is(':visible')
                    ? 'üìä –°–∫—Ä—ã—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è'
                    : 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è'
                );
            });
        } else {
            thinkContainer.remove();
        }

        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        if (isOldMessage) {
            mainTextEl.show();
        }

        return aiMessageEl;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    function fetchChats() {
        $.ajax({
            url: '/api/chats',
            method: 'GET',
            dataType: 'json',
            success: function(chats) {
                $('#chatList').empty();
                if (Array.isArray(chats)) {
                    chats.forEach((chat) => {
                        $('#chatList').append(`
                            <li class="chatItem" data-id="${chat.id}">
                                ${chat.chatName} <button class="deleteChatBtn">–£–¥–∞–ª–∏—Ç—å</button>
                            </li>
                        `);
                    });
                } else {
                    console.error('Unexpected response format:', chats);
                    alert('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:', {
                    status: status,
                    error: error,
                    response: xhr.responseText
                });
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤');
            }
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    $('#sidePanelToggle').on('click', function() {
        $('#sidePanel').toggleClass('open');
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    $('#createChatBtn').on('click', function() {
        $.ajax({
            url: '/api/chats',
            method: 'POST',
            contentType: 'application/json',
            dataType: 'json',
            data: JSON.stringify({ chatName: "–ù–æ–≤—ã–π —á–∞—Ç" }),
            success: function(chat) {
                console.log('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chat);
                fetchChats();
                $(`.chatItem[data-id="${chat.id}"]`).click();
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', {
                    status: status,
                    error: error,
                    response: xhr.responseText
                });
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞');
            }
        });
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    $(document).on('click', '.deleteChatBtn', function(event) {
        event.stopPropagation();
        const chatId = $(this).parent().data('id');
        $.ajax({
            url: `/api/chats/${chatId}`,
            method: 'DELETE',
            success: function() {
                fetchChats();
                $('#response').empty();
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', {
                    status: status,
                    error: error,
                    response: xhr.responseText
                });
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ ' + chatId);
            }
        });
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    $(document).on('click', '.chatItem', function() {
        $('.chatItem').removeClass('selected');
        $(this).addClass('selected');

        const chatId = $(this).data('id');
        $('#response').empty();

        $.ajax({
            url: `/api/chats/${chatId}/messages`,
            method: 'GET',
            dataType: 'json',
            success: function(messages) {
                if (Array.isArray(messages)) {
                    messages.forEach((msg) => {
                        if (msg.isAiResponse) {
                            $('#response').append(createAiMessage(msg.content, true));
                        } else {
                            const sender = msg.userId ? '–í—ã' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                            $('#response').append(`<div class="message user-message"><strong>${sender}:</strong> ${msg.content}</div>`);
                        }
                    });
                } else {
                    console.error('Unexpected messages format:', messages);
                    alert('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', {
                    status: status,
                    error: error,
                    response: xhr.responseText,
                    statusCode: xhr.status
                });

                switch(xhr.status) {
                    case 404:
                        alert('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        break;
                    case 403:
                        alert('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É');
                        break;
                    case 500:
                        alert('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                        break;
                    default:
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
                }
            }
        });
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    $('#chatForm').on('submit', function(event) {
        event.preventDefault();
        const userInput = $('#userInput').val();
        const activeChatId = $('.chatItem.selected').data('id');

        if (!activeChatId) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            return;
        }

        if (!userInput.trim()) {
            return;
        }

        $('#response').append(`<div class="message user-message"><strong>–í—ã:</strong> ${userInput}</div>`);
        $('#userInput').val('');

        const loadingEl = $('<div class="message loading">–ö—Ä–∏–Ω–∂–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç...</div>');
        $('#response').append(loadingEl);

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        const aiMessageEl = $('<div class="message ai-message"><strong>–ö—Ä–∏–Ω–∂–∏–∫:</strong> </div>');
        const mainTextEl = $('<div class="ai-main-text"></div>');
        const thinkContainer = $('<div class="think-container"></div>');
        const thinkToggle = $('<button class="think-toggle">üìä –°–∫—Ä—ã—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è</button>');
        const thinkContent = $('<div class="think-content"></div>');

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º)
        thinkContainer.append(thinkToggle).append(thinkContent);
        aiMessageEl.append(thinkContainer).append(mainTextEl);
        $('#response').append(aiMessageEl);

        let inThinkBlock = false;
        let thinkContentVisible = false;  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤–∏–¥–∏–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É)
        thinkToggle.on('click', function() {
            thinkContentVisible = !thinkContentVisible;
            thinkContent.toggle(thinkContentVisible);
            $(this).text(
                thinkContentVisible
                ? 'üìä –°–∫—Ä—ã—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è'
                : 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è'
            );
        });

        fetch(`/api/deepseek?chatId=${activeChatId}&input=${encodeURIComponent(userInput)}`, {
            method: 'POST'
        }).then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                });
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            function processChunk(text) {
                let remainingText = text;

                while (remainingText.length > 0) {
                    if (!inThinkBlock) {
                        const thinkStart = remainingText.indexOf('<think>');
                        if (thinkStart >= 0) {
                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–≥–∞ <think>
                            mainTextEl.append(remainingText.substring(0, thinkStart));
                            inThinkBlock = true;
                            remainingText = remainingText.substring(thinkStart + 7);
                        } else {
                            // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                            mainTextEl.append(remainingText);
                            remainingText = '';
                        }
                    } else {
                        const thinkEnd = remainingText.indexOf('</think>');
                        if (thinkEnd >= 0) {
                            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ think-–±–ª–æ–∫–∞
                            thinkContent.append(remainingText.substring(0, thinkEnd));
                            remainingText = remainingText.substring(thinkEnd + 8);
                            inThinkBlock = false;
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ think-–±–ª–æ–∫
                            thinkContent.append(remainingText);
                            remainingText = '';
                        }
                    }
                }
            }

            function readStream() {
                reader.read().then(({ done, value }) => {
                    if (done) {
                        loadingEl.remove();
                        return;
                    }

                    const textChunk = decoder.decode(value, { stream: true });
                    processChunk(textChunk);
                    readStream();
                });
            }

            readStream();
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            loadingEl.remove();
            $('#response').append(`<div class="message ai-message"><strong>–ö—Ä–∏–Ω–∂–∏–∫:</strong> –û—à–∏–±–∫–∞: ${error.message}</div>`);
        });
    });


    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fetchChats();
});
